# Default values for cipherstash-proxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: cipherstash/proxy
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "2.1.2"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# CipherStash configuration
cipherstash:
  workspaceCrn: "replace_with_cipherstash_workspace_crn"
  clientId: "replace_with_cipherstash_client_id"
  clientKey: "replace_with_cipherstash_client_key"  # Only used if secrets are disabled
  clientAccessKey: "replace_with_cipherstash_access_key"  # Only used if secrets are disabled

# Database configuration
database:
  host: "replace_with_postgres_host"
  name: "replace_with_postgres_database"
  port: "replace_with_postgres_port"
  username: "replace_with_postgres_username"
  password: "replace_with_postgres_password"  # Only used if secrets are disabled
  # Enable TLS verification between Proxy and the backing database
  withTlsVerification: false
  # Install AWS RDS certificate bundle (recommended when running on AWS)
  installAwsRdsCertBundle: false

# Logging configuration
logging:
  # Log level (error | warn | info | debug | trace)
  level: "info"
  # Log format (pretty | text | structured)
  # Default: pretty if terminal detected, otherwise structured
  format: ""
  # Enable ANSI (colored) output
  # Default: true if terminal detected, otherwise false
  ansiEnabled: ""

# TLS configuration
tls:
  # Enforce TLS connections from Client to Proxy
  requireTls: false
  # TLS certificate configuration
  certificate:
    # Path to the Public Certificate .crt file
    path: ""
    # The Public Certificate PEM as a string
    pem: ""
  # TLS private key configuration
  privateKey:
    # Path to the Private Key file
    path: ""
    # The Private Key PEM as a string
    pem: ""

# Secrets configuration
secrets:
  # Whether to create secrets for sensitive values
  create: true

  # If create is true, these values will be stored in a Kubernetes secret
  # Leave empty to use the values from database.password, cipherstash.clientKey, etc.
  databasePassword: ""
  cipherstashClientKey: ""
  cipherstashClientAccessKey: ""
  databaseHost: ""
  databaseName: ""
  databasePort: ""
  databaseUsername: ""
  cipherstashWorkspaceCrn: ""
  cipherstashClientId: ""

  # Use external secrets (when create is false)
  external:
    # Name of existing secret containing database password
    databasePasswordSecret:
      name: ""
      key: "password"

    # Name of existing secret containing CipherStash client key
    cipherstashClientKeySecret:
      name: ""
      key: "client-key"

    # Name of existing secret containing CipherStash client access key
    cipherstashClientAccessKeySecret:
      name: ""
      key: "client-access-key"

    # Name of existing secret containing database host
    databaseHostSecret:
      name: ""
      key: "host"

    # Name of existing secret containing database name
    databaseNameSecret:
      name: ""
      key: "name"

    # Name of existing secret containing database port
    databasePortSecret:
      name: ""
      key: "port"

    # Name of existing secret containing database username
    databaseUsernameSecret:
      name: ""
      key: "username"

    # Name of existing secret containing CipherStash workspace CRN
    cipherstashWorkspaceCrnSecret:
      name: ""
      key: "workspace-crn"

    # Name of existing secret containing CipherStash client ID
    cipherstashClientIdSecret:
      name: ""
      key: "client-id"

# Prometheus configuration
prometheus:
  enabled: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 6432
  targetPort: 6432

# Metrics service configuration
metricsService:
  enabled: true
  type: ClusterIP
  port: 9930
  targetPort: 9930
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9930"
    prometheus.io/path: "/metrics"

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 1
    memory: 2Gi
  requests:
    cpu: 100m
    memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Strategy for deployment updates
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 25%
    maxSurge: 25%

# Probes configuration
probes:
  liveness:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    tcpSocket:
      port: 6432
  readiness:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    tcpSocket:
      port: 6432

# Namespace configuration
namespace:
  create: false
  name: cipherstash
