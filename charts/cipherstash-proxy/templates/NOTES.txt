1. Connect to the CipherStash Proxy using these connection details:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  Host: {{ $host.host }}
  Port: {{ $.Values.service.port }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ include "cipherstash-proxy.namespace" . }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "cipherstash-proxy.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ include "cipherstash-proxy.namespace" . }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo "Host: $NODE_IP, Port: $NODE_PORT"
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status by running 'kubectl get --namespace {{ include "cipherstash-proxy.namespace" . }} svc -w {{ include "cipherstash-proxy.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ include "cipherstash-proxy.namespace" . }} {{ include "cipherstash-proxy.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo "Host: $SERVICE_IP, Port: {{ .Values.service.port }}"
{{- else if contains "ClusterIP" .Values.service.type }}
  # For applications running inside the cluster, use the service DNS name:
  Host: {{ include "cipherstash-proxy.fullname" . }}.{{ include "cipherstash-proxy.namespace" . }}.svc.cluster.local
  Port: {{ .Values.service.port }}
  
  # For external access, use port-forwarding:
  kubectl --namespace {{ include "cipherstash-proxy.namespace" . }} port-forward svc/{{ include "cipherstash-proxy.fullname" . }} {{ .Values.service.port }}:{{ .Values.service.port }}
  # Then connect to: Host: localhost, Port: {{ .Values.service.port }}
{{- end }}

2. CipherStash Proxy Configuration:
   - Proxy Port: {{ .Values.service.port }}
   - Target Database: {{ .Values.database.host }}:{{ .Values.database.port }}/{{ .Values.database.name }}
   {{- if .Values.metricsService.enabled }}
   - Metrics Port: {{ .Values.metricsService.port }} (Prometheus metrics available at /metrics)
   {{- end }}

3. To connect your application to the proxy, update your database connection string:
   {{- if contains "ClusterIP" .Values.service.type }}
   # For applications inside the cluster:
   postgresql://username:password@{{ include "cipherstash-proxy.fullname" . }}.{{ include "cipherstash-proxy.namespace" . }}.svc.cluster.local:{{ .Values.service.port }}/database_name
   {{- else }}
   # Use the Host and Port from step 1 above in your connection string:
   postgresql://username:password@HOST:PORT/database_name
   {{- end }}

4. Important Notes:
   - Replace 'username', 'password', and 'database_name' with your actual database credentials
   - Make sure your database credentials and CipherStash configuration are correctly set in values.yaml
   - Verify that your PostgreSQL database is accessible from the cluster
   - The proxy transparently handles encryption/decryption - your application uses standard PostgreSQL drivers
   - Check the proxy logs for any configuration or connection issues:
     kubectl logs --namespace {{ include "cipherstash-proxy.namespace" . }} -l "{{ include "cipherstash-proxy.selectorLabels" . | replace ": " "=" | replace "\n" "," }}" -f 