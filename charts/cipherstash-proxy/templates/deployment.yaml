apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cipherstash-proxy.fullname" . }}
  namespace: {{ include "cipherstash-proxy.namespace" . }}
  labels:
    {{- include "cipherstash-proxy.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- with .Values.strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "cipherstash-proxy.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "cipherstash-proxy.selectorLabels" . | nindent 8 }}
        {{- if .Chart.AppVersion }}
        version: {{ .Chart.AppVersion | quote }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cipherstash-proxy.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "cipherstash-proxy.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: proxy
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
            {{- if .Values.metricsService.enabled }}
            - name: metrics
              containerPort: {{ .Values.metricsService.targetPort }}
              protocol: TCP
            {{- end }}
          env:
            - name: CS_DATABASE__HOST
              {{- if or .Values.secrets.create (and .Values.secrets.external.databaseHostSecret.name (not .Values.secrets.create)) }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "cipherstash-proxy.databaseHostSecret" . }}
                  key: {{ include "cipherstash-proxy.databaseHostSecretKey" . }}
              {{- else }}
              value: {{ required "database.host is required" .Values.database.host | quote }}
              {{- end }}
            - name: CS_DATABASE__NAME
              {{- if or .Values.secrets.create (and .Values.secrets.external.databaseNameSecret.name (not .Values.secrets.create)) }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "cipherstash-proxy.databaseNameSecret" . }}
                  key: {{ include "cipherstash-proxy.databaseNameSecretKey" . }}
              {{- else }}
              value: {{ required "database.name is required" .Values.database.name | quote }}
              {{- end }}
            - name: CS_DATABASE__PORT
              {{- if or .Values.secrets.create (and .Values.secrets.external.databasePortSecret.name (not .Values.secrets.create)) }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "cipherstash-proxy.databasePortSecret" . }}
                  key: {{ include "cipherstash-proxy.databasePortSecretKey" . }}
              {{- else }}
              value: {{ .Values.database.port | quote }}
              {{- end }}
            - name: CS_DATABASE__USERNAME
              {{- if or .Values.secrets.create (and .Values.secrets.external.databaseUsernameSecret.name (not .Values.secrets.create)) }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "cipherstash-proxy.databaseUsernameSecret" . }}
                  key: {{ include "cipherstash-proxy.databaseUsernameSecretKey" . }}
              {{- else }}
              value: {{ required "database.username is required" .Values.database.username | quote }}
              {{- end }}
            - name: CS_DATABASE__PASSWORD
              {{- if or .Values.secrets.create (and .Values.secrets.external.databasePasswordSecret.name (not .Values.secrets.create)) }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "cipherstash-proxy.databasePasswordSecret" . }}
                  key: {{ include "cipherstash-proxy.databasePasswordSecretKey" . }}
              {{- else }}
              value: {{ .Values.database.password | quote }}
              {{- end }}
            - name: CS_DATABASE__WITH_TLS_VERIFICATION
              value: {{ .Values.database.withTlsVerification | quote }}
            {{- if .Values.database.installAwsRdsCertBundle }}
            - name: CS_DATABASE__INSTALL_AWS_RDS_CERT_BUNDLE
              value: "true"
            {{- end }}
            - name: CS_WORKSPACE_CRN
              {{- if or .Values.secrets.create (and .Values.secrets.external.cipherstashWorkspaceCrnSecret.name (not .Values.secrets.create)) }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "cipherstash-proxy.cipherstashWorkspaceCrnSecret" . }}
                  key: {{ include "cipherstash-proxy.cipherstashWorkspaceCrnSecretKey" . }}
              {{- else }}
              value: {{ required "cipherstash.workspaceCrn is required" .Values.cipherstash.workspaceCrn | quote }}
              {{- end }}
            - name: CS_CLIENT_ID
              {{- if or .Values.secrets.create (and .Values.secrets.external.cipherstashClientIdSecret.name (not .Values.secrets.create)) }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "cipherstash-proxy.cipherstashClientIdSecret" . }}
                  key: {{ include "cipherstash-proxy.cipherstashClientIdSecretKey" . }}
              {{- else }}
              value: {{ required "cipherstash.clientId is required" .Values.cipherstash.clientId | quote }}
              {{- end }}
            - name: CS_CLIENT_KEY
              {{- if or .Values.secrets.create (and .Values.secrets.external.cipherstashClientKeySecret.name (not .Values.secrets.create)) }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "cipherstash-proxy.cipherstashClientKeySecret" . }}
                  key: {{ include "cipherstash-proxy.cipherstashClientKeySecretKey" . }}
              {{- else }}
              value: {{ .Values.cipherstash.clientKey | quote }}
              {{- end }}
            - name: CS_CLIENT_ACCESS_KEY
              {{- if or .Values.secrets.create (and .Values.secrets.external.cipherstashClientAccessKeySecret.name (not .Values.secrets.create)) }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "cipherstash-proxy.cipherstashClientAccessKeySecret" . }}
                  key: {{ include "cipherstash-proxy.cipherstashClientAccessKeySecretKey" . }}
              {{- else }}
              value: {{ .Values.cipherstash.clientAccessKey | quote }}
              {{- end }}
            # Logging configuration
            - name: CS_LOG__LEVEL
              value: {{ .Values.logging.level | quote }}
            {{- if .Values.logging.format }}
            - name: CS_LOG__FORMAT
              value: {{ .Values.logging.format | quote }}
            {{- end }}
            {{- if .Values.logging.ansiEnabled }}
            - name: CS_LOG__ANSI_ENABLED
              value: {{ .Values.logging.ansiEnabled | quote }}
            {{- end }}
            # TLS configuration
            - name: CS_SERVER__REQUIRE_TLS
              value: {{ .Values.tls.requireTls | quote }}
            {{- if .Values.tls.certificate.path }}
            - name: CS_TLS__CERTIFICATE_PATH
              value: {{ .Values.tls.certificate.path | quote }}
            {{- end }}
            {{- if .Values.tls.certificate.pem }}
            - name: CS_TLS__CERTIFICATE_PEM
              value: {{ .Values.tls.certificate.pem | quote }}
            {{- end }}
            {{- if .Values.tls.privateKey.path }}
            - name: CS_TLS__PRIVATE_KEY_PATH
              value: {{ .Values.tls.privateKey.path | quote }}
            {{- end }}
            {{- if .Values.tls.privateKey.pem }}
            - name: CS_TLS__PRIVATE_KEY_PEM
              value: {{ .Values.tls.privateKey.pem | quote }}
            {{- end }}
            {{- if .Values.prometheus.enabled }}
            - name: CS_PROMETHEUS__ENABLED
              value: "true"
            {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            {{- with .Values.probes.liveness.tcpSocket }}
            tcpSocket:
              port: {{ .port }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            {{- with .Values.probes.readiness.tcpSocket }}
            tcpSocket:
              port: {{ .port }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
